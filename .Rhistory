return(plt)
}
#RowHist(classData, "Slay")
RowCounts(classData, "Counts of All Line items")
RowCounts(classData, Title = "Counts of All Line items")
library(openxlsx)
library(ggplot2)
library(ggrepel)
library(ggbreak)
library(patchwork)
library(dplyr)
library(stringr)
library(lubridate)
library(readxl)
file_path <- "C:/Users/24chi/Desktop/OffshoreWind/DA_Classifications_Final.xlsx"
classData <- read_excel(file_path, sheet = 1) #Grabbing the data from excel
metaData <- read_excel(file_path, sheet = 2) #Grabbing the data from excel
classData$prj <- substr(classData$Code,1,3)
classData$comit <- as.numeric(substr(classData$Code,4,4))
classData$date <- metaData$prjDate[match(classData$prj, metaData$prjCode)]
classData$date <- as.Date(classData$date, format = "%m/%d/%Y")
widerCats <- list(c("MarineMams", "Turts", "Birds", "Bats", "Fish"),
c("Benthic", "WaterQ", "AcouBelow", "EssFishHabs", "CoastalHabs", "WetLands"),
c("RecComFisheries","VesselNav", "PubHealth"),
c("CultArcheo" , "SocioEcon", "EnviroJustice","RecTourism"),
c("Visual","AcouAbove", "FAA-DOD", "AirQ", "Other"))
widerCatsName <- c("Animals", "BenthicQuality", "Boats", "Human", "Air")
for (i in c(1:5)){
classData[widerCatsName[i]] <- sapply(strsplit(classData$Prot, ",\\s*"), function(tags) any(tags %in% widerCats[[i]]))
}
classData$widerCatsall <- paste0(
ifelse(classData$Animals, 'Animals, ', ''),
ifelse(classData$BenthicQuality, 'BenthicQuality, ', ''),
ifelse(classData$Boats, 'Boats, ', ''),
ifelse(classData$Human, 'Human, ', ''),
ifelse(classData$Air, 'Air, ', ''))
RowCounts <- function(ClassData, Title, bin = NULL) {
lineCounts <- sort(table(ClassData$prj))
count_df <- data.frame(Prj = names(lineCounts), Count = as.vector(lineCounts))
count_df$date <- metaData$prjDate[match(count_df$Prj, metaData$prjCode)]
count_df$Dev <- metaData$Developer[match(count_df$Prj, metaData$prjCode)]
count_df$Doc <- metaData$DocType[match(count_df$Prj, metaData$prjCode)]
count_df$Consult <- metaData$Consultantcy[match(count_df$Prj, metaData$prjCode)]
for (i in prjNames){
if (!(i %in% as.vector(count_df$Prj))){
count_df <- rbind(count_df, data.frame(
Prj = i,
Count = 0,
date = metaData$prjDate[match(i, metaData$prjCode)],
Dev = metaData$Developer[match(i, metaData$prjCode)],
Doc = metaData$DocType[match(i, metaData$prjCode)],
Consult = metaData$Consultantcy[match(i, metaData$prjCode)]))
}
}
if ("BIW" %in% count_df$Prj){
count_df$date[count_df$Prj == "BIW"] <- as.character('10/01/2020')
}
count_df$date <- as.Date(count_df$date, format = "%m/%d/%Y")
count_df <- data.frame(count_df[order(count_df$date),], row.names = NULL)
plt<-ggplot(count_df, aes(date, Count, label = Prj, color = Dev, shape = Doc))+
geom_point()+ geom_text_repel(show.legend = FALSE)+theme_classic()+
labs(title = Title, x ="Document release date", y = "Count")
if (!is.null(bin)){
ap <- data.frame(title= Title, Cor = cor(as.numeric(count_df$date), count_df$Count), type = "#")
bin<<-rbind(bin, ap)
}
if ("BIW" %in% count_df$Prj){
plt<-plt + geom_segment(aes(
x=date[Prj == "BIW"],
y=Count[Prj == "BIW"],
xend=as.Date(-Inf),
yend=Count[Prj == "BIW"]),
color = 'black',
arrow = arrow(length=unit(0.5, 'cm')))
}
return(plt)
}
RowCountsFreq <- function(OgClassData, ClassData, Title, bin = NULL) {
lineCounts <- table(ClassData$prj)
lineCounts <- data.frame(Prj = names(lineCounts), Count = as.vector(lineCounts))
OglineCounts <- table(OgClassData$prj)
OglineCounts <- data.frame(Prj = names(OglineCounts), Count = as.vector(OglineCounts))
OglineCounts <- OglineCounts[OglineCounts$Prj %in% lineCounts$Prj, ]
count_df <- data.frame(Prj = lineCounts$Prj, Count = lineCounts$Count, OgCount = OglineCounts$Count)
count_df$freq <- (count_df$Count / count_df$OgCount) * 100
count_df$date <- metaData$prjDate[match(count_df$Prj, metaData$prjCode)]
count_df$Dev <- metaData$Developer[match(count_df$Prj, metaData$prjCode)]
count_df$Doc <- metaData$DocType[match(count_df$Prj, metaData$prjCode)]
count_df$Consult <- metaData$Consultantcy[match(count_df$Prj, metaData$prjCode)]
for (i in prjNames){
if (!(i %in% as.vector(count_df$Prj))){
count_df <- rbind(count_df, data.frame(Prj = i,
Count = 0,
OgCount =0,
freq = 0,
date = metaData$prjDate[match(i, metaData$prjCode)],
Dev = metaData$Developer[match(i, metaData$prjCode)],
Doc = metaData$DocType[match(i, metaData$prjCode)],
Consult = metaData$Consultantcy[match(i, metaData$prjCode)]))
}
}
if ("BIW" %in% count_df$Prj){
count_df$date[count_df$Prj == "BIW"] <- as.character('10/01/2020')
}
count_df$date <- as.Date(count_df$date, format = "%m/%d/%Y")
count_df <- data.frame(count_df[order(count_df$date),], row.names = NULL)
plt<-ggplot(count_df, aes(date, freq, label = Prj, color = Dev, shape = Doc))+
geom_point()+ geom_text_repel(show.legend = FALSE)+theme_classic()+
labs(title = Title, x ="Document release date", y = "frequency %")
if (!is.null(bin)){
ap <- data.frame(title= Title, Cor = cor(as.numeric(count_df$date), count_df$freq), type = "%")
bin<<-rbind(bin, ap)
}
if ("BIW" %in% count_df$Prj){
plt<-plt + geom_segment(aes(
x=date[Prj == "BIW"],
y=freq[Prj == "BIW"],
xend=as.Date(-Inf),
yend=freq[Prj == "BIW"]),
color = 'black',
arrow = arrow(length=unit(0.5, 'cm')))
}
return(plt)
}
library(ggplot2)
RowHist <- function(ClassData, Title) {
lineCounts <- sort(table(ClassData$prj))
count_df <- data.frame(Prj = names(lineCounts), Count = as.vector(lineCounts))
count_df$date <- metaData$prjDate[match(count_df$Prj, metaData$prjCode)]
count_df$date <- as.Date(count_df$date, format = "%m/%d/%Y")
# Create intervals using cut()
cuts <- cut(count_df$date, breaks = '3 months')
interval_labels <- as.Date(levels(cuts))
# Calculate the mean of Count within each interval
mean_values <- aggregate(Count ~ cuts, data = count_df, FUN = mean)
# Create a complete set of intervals
all_intervals <- data.frame(cuts = levels(cuts))
# Merge mean_values with all_intervals, filling missing values with 0
mean_values_complete <- merge(all_intervals, mean_values, by = "cuts", all.x = TRUE)
mean_values_complete[is.na(mean_values_complete)] <- 0
# Plot the histogram with mean values
plt<- ggplot(mean_values_complete, aes(cuts, Count)) +
geom_histogram(stat = 'identity') +
labs(x = "Time", y = "Count", title = Title) +
theme_classic()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
return(plt)
}
#RowHist(classData, "Slay")
RowCounts(classData, Title = "Counts of All Line items")
library(openxlsx)
library(ggplot2)
library(ggrepel)
library(ggbreak)
library(patchwork)
library(dplyr)
library(stringr)
library(lubridate)
library(readxl)
file_path <- "C:/Users/24chi/Desktop/OffshoreWind/DA_Classifications_Final.xlsx"
classData <- read_excel(file_path, sheet = 1) #Grabbing the data from excel
metaData <- read_excel(file_path, sheet = 2) #Grabbing the data from excel
classData$prj <- substr(classData$Code,1,3)
classData$comit <- as.numeric(substr(classData$Code,4,4))
classData$date <- metaData$prjDate[match(classData$prj, metaData$prjCode)]
classData$date <- as.Date(classData$date, format = "%m/%d/%Y")
widerCats <- list(c("MarineMams", "Turts", "Birds", "Bats", "Fish"),
c("Benthic", "WaterQ", "AcouBelow", "EssFishHabs", "CoastalHabs", "WetLands"),
c("RecComFisheries","VesselNav", "PubHealth"),
c("CultArcheo" , "SocioEcon", "EnviroJustice","RecTourism"),
c("Visual","AcouAbove", "FAA-DOD", "AirQ", "Other"))
widerCatsName <- c("Animals", "BenthicQuality", "Boats", "Human", "Air")
for (i in c(1:5)){
classData[widerCatsName[i]] <- sapply(strsplit(classData$Prot, ",\\s*"), function(tags) any(tags %in% widerCats[[i]]))
}
classData$widerCatsall <- paste0(
ifelse(classData$Animals, 'Animals, ', ''),
ifelse(classData$BenthicQuality, 'BenthicQuality, ', ''),
ifelse(classData$Boats, 'Boats, ', ''),
ifelse(classData$Human, 'Human, ', ''),
ifelse(classData$Air, 'Air, ', ''))
RowCounts <- function(ClassData, Title, bin = NULL) {
lineCounts <- sort(table(ClassData$prj))
count_df <- data.frame(Prj = names(lineCounts), Count = as.vector(lineCounts))
count_df$date <- metaData$prjDate[match(count_df$Prj, metaData$prjCode)]
count_df$Dev <- metaData$Developer[match(count_df$Prj, metaData$prjCode)]
count_df$Doc <- metaData$DocType[match(count_df$Prj, metaData$prjCode)]
count_df$Consult <- metaData$Consultantcy[match(count_df$Prj, metaData$prjCode)]
for (i in prjNames){
if (!(i %in% as.vector(count_df$Prj))){
count_df <- rbind(count_df, data.frame(
Prj = i,
Count = 0,
date = metaData$prjDate[match(i, metaData$prjCode)],
Dev = metaData$Developer[match(i, metaData$prjCode)],
Doc = metaData$DocType[match(i, metaData$prjCode)],
Consult = metaData$Consultantcy[match(i, metaData$prjCode)]))
}
}
if ("BIW" %in% count_df$Prj){
count_df$date[count_df$Prj == "BIW"] <- as.character('10/01/2020')
}
count_df$date <- as.Date(count_df$date, format = "%m/%d/%Y")
count_df <- data.frame(count_df[order(count_df$date),], row.names = NULL)
plt<-ggplot(count_df, aes(date, Count, label = Prj, color = Dev, shape = Doc))+
geom_point()+ geom_text_repel(show.legend = FALSE)+theme_classic()+
labs(title = Title, x ="Document release date", y = "Count")
if (!is.null(bin)){
ap <- data.frame(title= Title, Cor = cor(as.numeric(count_df$date), count_df$Count), type = "#")
bin<<-rbind(bin, ap)
}
if ("BIW" %in% count_df$Prj){
plt<-plt + geom_segment(aes(
x=date[Prj == "BIW"],
y=Count[Prj == "BIW"],
xend=as.Date(-Inf),
yend=Count[Prj == "BIW"]),
color = 'black',
arrow = arrow(length=unit(0.5, 'cm')))
}
return(plt)
}
RowCounts(classData, Title = "Counts of All Line items")
library(openxlsx)
library(ggplot2)
library(ggrepel)
library(ggbreak)
library(patchwork)
library(dplyr)
library(stringr)
library(lubridate)
library(readxl)
file_path <- "C:/Users/24chi/Desktop/OffshoreWind/DA_Classifications_Final.xlsx"
classData <- read_excel(file_path, sheet = 1) #Grabbing the data from excel
metaData <- read_excel(file_path, sheet = 2) #Grabbing the data from excel
classData$prj <- substr(classData$Code,1,3)
classData$comit <- as.numeric(substr(classData$Code,4,4))
classData$date <- metaData$prjDate[match(classData$prj, metaData$prjCode)]
classData$date <- as.Date(classData$date, format = "%m/%d/%Y")
widerCats <- list(c("MarineMams", "Turts", "Birds", "Bats", "Fish"),
c("Benthic", "WaterQ", "AcouBelow", "EssFishHabs", "CoastalHabs", "WetLands"),
c("RecComFisheries","VesselNav", "PubHealth"),
c("CultArcheo" , "SocioEcon", "EnviroJustice","RecTourism"),
c("Visual","AcouAbove", "FAA-DOD", "AirQ", "Other"))
widerCatsName <- c("Animals", "BenthicQuality", "Boats", "Human", "Air")
for (i in c(1:5)){
classData[widerCatsName[i]] <- sapply(strsplit(classData$Prot, ",\\s*"), function(tags) any(tags %in% widerCats[[i]]))
}
classData$widerCatsall <- paste0(
ifelse(classData$Animals, 'Animals, ', ''),
ifelse(classData$BenthicQuality, 'BenthicQuality, ', ''),
ifelse(classData$Boats, 'Boats, ', ''),
ifelse(classData$Human, 'Human, ', ''),
ifelse(classData$Air, 'Air, ', ''))
RowCounts <- function(ClassData, Title, bin = NULL) {
lineCounts <- sort(table(ClassData$prj))
count_df <- data.frame(Prj = names(lineCounts), Count = as.vector(lineCounts))
count_df$date <- metaData$prjDate[match(count_df$Prj, metaData$prjCode)]
count_df$Dev <- metaData$Developer[match(count_df$Prj, metaData$prjCode)]
count_df$Doc <- metaData$DocType[match(count_df$Prj, metaData$prjCode)]
count_df$Consult <- metaData$Consultantcy[match(count_df$Prj, metaData$prjCode)]
for (i in prjNames){
if (!(i %in% as.vector(count_df$Prj))){
count_df <- rbind(count_df, data.frame(
Prj = i,
Count = 0,
date = metaData$prjDate[match(i, metaData$prjCode)],
Dev = metaData$Developer[match(i, metaData$prjCode)],
Doc = metaData$DocType[match(i, metaData$prjCode)],
Consult = metaData$Consultantcy[match(i, metaData$prjCode)]))
}
}
if ("BIW" %in% count_df$Prj){
count_df$date[count_df$Prj == "BIW"] <- as.character('10/01/2020')
}
count_df$date <- as.Date(count_df$date, format = "%m/%d/%Y")
count_df <- data.frame(count_df[order(count_df$date),], row.names = NULL)
plt<-ggplot(count_df, aes(date, Count, label = Prj, color = Dev, shape = Doc))+
geom_point()+ geom_text_repel(show.legend = FALSE)+theme_classic()+
labs(title = Title, x ="Document release date", y = "Count")
if (!is.null(bin)){
ap <- data.frame(title= Title, Cor = cor(as.numeric(count_df$date), count_df$Count), type = "#")
bin<<-rbind(bin, ap)
}
if ("BIW" %in% count_df$Prj){
plt<-plt + geom_segment(aes(
x=date[Prj == "BIW"],
y=Count[Prj == "BIW"],
xend=as.Date(-Inf),
yend=Count[Prj == "BIW"]),
color = 'black',
arrow = arrow(length=unit(0.5, 'cm')))
}
return(plt)
}
RowCountsFreq <- function(OgClassData, ClassData, Title, bin = NULL) {
lineCounts <- table(ClassData$prj)
lineCounts <- data.frame(Prj = names(lineCounts), Count = as.vector(lineCounts))
OglineCounts <- table(OgClassData$prj)
OglineCounts <- data.frame(Prj = names(OglineCounts), Count = as.vector(OglineCounts))
OglineCounts <- OglineCounts[OglineCounts$Prj %in% lineCounts$Prj, ]
count_df <- data.frame(Prj = lineCounts$Prj, Count = lineCounts$Count, OgCount = OglineCounts$Count)
count_df$freq <- (count_df$Count / count_df$OgCount) * 100
count_df$date <- metaData$prjDate[match(count_df$Prj, metaData$prjCode)]
count_df$Dev <- metaData$Developer[match(count_df$Prj, metaData$prjCode)]
count_df$Doc <- metaData$DocType[match(count_df$Prj, metaData$prjCode)]
count_df$Consult <- metaData$Consultantcy[match(count_df$Prj, metaData$prjCode)]
for (i in prjNames){
if (!(i %in% as.vector(count_df$Prj))){
count_df <- rbind(count_df, data.frame(Prj = i,
Count = 0,
OgCount =0,
freq = 0,
date = metaData$prjDate[match(i, metaData$prjCode)],
Dev = metaData$Developer[match(i, metaData$prjCode)],
Doc = metaData$DocType[match(i, metaData$prjCode)],
Consult = metaData$Consultantcy[match(i, metaData$prjCode)]))
}
}
if ("BIW" %in% count_df$Prj){
count_df$date[count_df$Prj == "BIW"] <- as.character('10/01/2020')
}
count_df$date <- as.Date(count_df$date, format = "%m/%d/%Y")
count_df <- data.frame(count_df[order(count_df$date),], row.names = NULL)
plt<-ggplot(count_df, aes(date, freq, label = Prj, color = Dev, shape = Doc))+
geom_point()+ geom_text_repel(show.legend = FALSE)+theme_classic()+
labs(title = Title, x ="Document release date", y = "frequency %")
if (!is.null(bin)){
ap <- data.frame(title= Title, Cor = cor(as.numeric(count_df$date), count_df$freq), type = "%")
bin<<-rbind(bin, ap)
}
if ("BIW" %in% count_df$Prj){
plt<-plt + geom_segment(aes(
x=date[Prj == "BIW"],
y=freq[Prj == "BIW"],
xend=as.Date(-Inf),
yend=freq[Prj == "BIW"]),
color = 'black',
arrow = arrow(length=unit(0.5, 'cm')))
}
return(plt)
}
library(ggplot2)
RowHist <- function(ClassData, Title) {
lineCounts <- sort(table(ClassData$prj))
count_df <- data.frame(Prj = names(lineCounts), Count = as.vector(lineCounts))
count_df$date <- metaData$prjDate[match(count_df$Prj, metaData$prjCode)]
count_df$date <- as.Date(count_df$date, format = "%m/%d/%Y")
# Create intervals using cut()
cuts <- cut(count_df$date, breaks = '3 months')
interval_labels <- as.Date(levels(cuts))
# Calculate the mean of Count within each interval
mean_values <- aggregate(Count ~ cuts, data = count_df, FUN = mean)
# Create a complete set of intervals
all_intervals <- data.frame(cuts = levels(cuts))
# Merge mean_values with all_intervals, filling missing values with 0
mean_values_complete <- merge(all_intervals, mean_values, by = "cuts", all.x = TRUE)
mean_values_complete[is.na(mean_values_complete)] <- 0
# Plot the histogram with mean values
plt<- ggplot(mean_values_complete, aes(cuts, Count)) +
geom_histogram(stat = 'identity') +
labs(x = "Time", y = "Count", title = Title) +
theme_classic()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
return(plt)
}
#RowHist(classData, "Slay")
RowCounts(classData, Title = "Counts of All Line items")
setwd("C:/Users/24chi/Desktop/OffshoreWind")
library(openxlsx)
library(ggplot2)
library(ggrepel)
library(ggbreak)
library(patchwork)
library(dplyr)
library(stringr)
library(lubridate)
library(readxl)
file_path <- "C:/Users/24chi/Desktop/OffshoreWind/DA_Classifications_Final.xlsx"
classData <- read_excel(file_path, sheet = 1) #Grabbing the data from excel
metaData <- read_excel(file_path, sheet = 2) #Grabbing the data from excel
classData$prj <- substr(classData$Code,1,3)
classData$comit <- as.numeric(substr(classData$Code,4,4))
classData$date <- metaData$prjDate[match(classData$prj, metaData$prjCode)]
classData$date <- as.Date(classData$date, format = "%m/%d/%Y")
widerCats <- list(c("MarineMams", "Turts", "Birds", "Bats", "Fish"),
c("Benthic", "WaterQ", "AcouBelow", "EssFishHabs", "CoastalHabs", "WetLands"),
c("RecComFisheries","VesselNav", "PubHealth"),
c("CultArcheo" , "SocioEcon", "EnviroJustice","RecTourism"),
c("Visual","AcouAbove", "FAA-DOD", "AirQ", "Other"))
widerCatsName <- c("Animals", "BenthicQuality", "Boats", "Human", "Air")
for (i in c(1:5)){
classData[widerCatsName[i]] <- sapply(strsplit(classData$Prot, ",\\s*"), function(tags) any(tags %in% widerCats[[i]]))
}
classData$widerCatsall <- paste0(
ifelse(classData$Animals, 'Animals, ', ''),
ifelse(classData$BenthicQuality, 'BenthicQuality, ', ''),
ifelse(classData$Boats, 'Boats, ', ''),
ifelse(classData$Human, 'Human, ', ''),
ifelse(classData$Air, 'Air, ', ''))
RowCounts <- function(ClassData, Title, bin = NULL) {
lineCounts <- sort(table(ClassData$prj))
count_df <- data.frame(Prj = names(lineCounts), Count = as.vector(lineCounts))
count_df$date <- metaData$prjDate[match(count_df$Prj, metaData$prjCode)]
count_df$Dev <- metaData$Developer[match(count_df$Prj, metaData$prjCode)]
count_df$Doc <- metaData$DocType[match(count_df$Prj, metaData$prjCode)]
count_df$Consult <- metaData$Consultantcy[match(count_df$Prj, metaData$prjCode)]
for (i in prjNames){
if (!(i %in% as.vector(count_df$Prj))){
count_df <- rbind(count_df, data.frame(
Prj = i,
Count = 0,
date = metaData$prjDate[match(i, metaData$prjCode)],
Dev = metaData$Developer[match(i, metaData$prjCode)],
Doc = metaData$DocType[match(i, metaData$prjCode)],
Consult = metaData$Consultantcy[match(i, metaData$prjCode)]))
}
}
if ("BIW" %in% count_df$Prj){
count_df$date[count_df$Prj == "BIW"] <- as.character('10/01/2020')
}
count_df$date <- as.Date(count_df$date, format = "%m/%d/%Y")
count_df <- data.frame(count_df[order(count_df$date),], row.names = NULL)
plt<-ggplot(count_df, aes(date, Count, label = Prj, color = Dev, shape = Doc))+
geom_point()+ geom_text_repel(show.legend = FALSE)+theme_classic()+
labs(title = Title, x ="Document release date", y = "Count")
if (!is.null(bin)){
ap <- data.frame(title= Title, Cor = cor(as.numeric(count_df$date), count_df$Count), type = "#")
bin<<-rbind(bin, ap)
}
if ("BIW" %in% count_df$Prj){
plt<-plt + geom_segment(aes(
x=date[Prj == "BIW"],
y=Count[Prj == "BIW"],
xend=as.Date(-Inf),
yend=Count[Prj == "BIW"]),
color = 'black',
arrow = arrow(length=unit(0.5, 'cm')))
}
return(plt)
}
RowCountsFreq <- function(OgClassData, ClassData, Title, bin = NULL) {
lineCounts <- table(ClassData$prj)
lineCounts <- data.frame(Prj = names(lineCounts), Count = as.vector(lineCounts))
OglineCounts <- table(OgClassData$prj)
OglineCounts <- data.frame(Prj = names(OglineCounts), Count = as.vector(OglineCounts))
OglineCounts <- OglineCounts[OglineCounts$Prj %in% lineCounts$Prj, ]
count_df <- data.frame(Prj = lineCounts$Prj, Count = lineCounts$Count, OgCount = OglineCounts$Count)
count_df$freq <- (count_df$Count / count_df$OgCount) * 100
count_df$date <- metaData$prjDate[match(count_df$Prj, metaData$prjCode)]
count_df$Dev <- metaData$Developer[match(count_df$Prj, metaData$prjCode)]
count_df$Doc <- metaData$DocType[match(count_df$Prj, metaData$prjCode)]
count_df$Consult <- metaData$Consultantcy[match(count_df$Prj, metaData$prjCode)]
for (i in prjNames){
if (!(i %in% as.vector(count_df$Prj))){
count_df <- rbind(count_df, data.frame(Prj = i,
Count = 0,
OgCount =0,
freq = 0,
date = metaData$prjDate[match(i, metaData$prjCode)],
Dev = metaData$Developer[match(i, metaData$prjCode)],
Doc = metaData$DocType[match(i, metaData$prjCode)],
Consult = metaData$Consultantcy[match(i, metaData$prjCode)]))
}
}
if ("BIW" %in% count_df$Prj){
count_df$date[count_df$Prj == "BIW"] <- as.character('10/01/2020')
}
count_df$date <- as.Date(count_df$date, format = "%m/%d/%Y")
count_df <- data.frame(count_df[order(count_df$date),], row.names = NULL)
plt<-ggplot(count_df, aes(date, freq, label = Prj, color = Dev, shape = Doc))+
geom_point()+ geom_text_repel(show.legend = FALSE)+theme_classic()+
labs(title = Title, x ="Document release date", y = "frequency %")
if (!is.null(bin)){
ap <- data.frame(title= Title, Cor = cor(as.numeric(count_df$date), count_df$freq), type = "%")
bin<<-rbind(bin, ap)
}
if ("BIW" %in% count_df$Prj){
plt<-plt + geom_segment(aes(
x=date[Prj == "BIW"],
y=freq[Prj == "BIW"],
xend=as.Date(-Inf),
yend=freq[Prj == "BIW"]),
color = 'black',
arrow = arrow(length=unit(0.5, 'cm')))
}
return(plt)
}
library(ggplot2)
RowHist <- function(ClassData, Title) {
lineCounts <- sort(table(ClassData$prj))
count_df <- data.frame(Prj = names(lineCounts), Count = as.vector(lineCounts))
count_df$date <- metaData$prjDate[match(count_df$Prj, metaData$prjCode)]
count_df$date <- as.Date(count_df$date, format = "%m/%d/%Y")
# Create intervals using cut()
cuts <- cut(count_df$date, breaks = '3 months')
interval_labels <- as.Date(levels(cuts))
# Calculate the mean of Count within each interval
mean_values <- aggregate(Count ~ cuts, data = count_df, FUN = mean)
# Create a complete set of intervals
all_intervals <- data.frame(cuts = levels(cuts))
# Merge mean_values with all_intervals, filling missing values with 0
mean_values_complete <- merge(all_intervals, mean_values, by = "cuts", all.x = TRUE)
mean_values_complete[is.na(mean_values_complete)] <- 0
# Plot the histogram with mean values
plt<- ggplot(mean_values_complete, aes(cuts, Count)) +
geom_histogram(stat = 'identity') +
labs(x = "Time", y = "Count", title = Title) +
theme_classic()+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
return(plt)
}
#RowHist(classData, "Slay")
RowCounts(classData, Title = "Counts of All Line items")
1+1
